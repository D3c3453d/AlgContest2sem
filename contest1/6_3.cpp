/*
На вокзале есть некоторое количество тупиков, куда прибывают электрички. 
Этот вокзал является их конечной станцией. 
Дано расписание движения электричек, в котором для каждой электрички указано время ее прибытия, 
а также время отправления в следующий рейс. Электрички в расписании упорядочены по времени прибытия. 
Когда электричка прибывает, ее ставят в свободный тупик с минимальным номером. 
При этом если электричка из какого-то тупика отправилась в момент времени X, 
то электричку, которая прибывает в момент времени X, в этот тупик ставить нельзя, 
а электричку, прибывающую в момент X+1 — можно. 
В данный момент на вокзале достаточное количество тупиков для работы по расписанию. 
Напишите программу, которая по данному расписанию определяет, 
какое минимальное количество тупиков требуется для работы вокзала.

Формат ввода:
Вначале вводится n - количество электричек в расписании. 1 ≤ n ≤ 100000. Затем вводятся n строк для каждой электрички, в строке - время прибытия и время отправления. Время - натуральное число от 0 до 1 000 000 000. Строки в расписании упорядочены по времени прибытия.

Формат вывода:
Натуральное число - минимальное количеством тупиков.

Пример 1:
Ввод:
1
10 20
Вывод:
1

Пример 2:
Ввод:
2
10 20
20 25
Вывод:
2

Пример 3:
Ввод:
3
10 20
20 25
21 30
Вывод:
2
*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;



int main() {
    int n;
    vector<pair<int, int>> schedule;
    cin >> n;
    for (int i = 0; i < n; ++ i){
        int t;
        cin >> t;
        schedule.push_back(make_pair(t, -1));
        cin >> t;
        schedule.push_back(make_pair(t, +1));
    }
    sort(schedule.begin(), schedule.end());
    int max = 0, cur = 0;
    for (auto i: schedule){
        cur -= i.second;
        if (cur > max)max = cur;
    }
    cout << max;
}
